// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id           String     @id @default(uuid())
  firstname    String?
  lastname     String?
  imageUrl     String?
  email        String     @unique
  phone        String?
  password     String
  role         Role
  properties   Property[] @relation("PropertyOwner")
  favorites    Favorite[]
  viewings     Viewing[]
  views        UniquePropertyView[] 
  sentMessages Message[]  @relation("Sender")
  chatsAsOwner Chat[]     @relation("Owner")
  chatsAsUser  Chat[]     @relation("User")
  ownerType       String? 
  companyName     String? 
  experience      String? 
  propertiesOwned Int?
  propertyTypes       String[] @default([])
  locations           String[] @default([])
  listingIntentions   String[] @default([])
  primaryGoal     String?
  monthlyBudget   String?
  additionalServices String[] @default([])
  timeframe           String?
  hasInsurance        Boolean?   @default(false)
  hasLicense          Boolean?   @default(false)
  agreeToTerms        Boolean?
  agreeToBackground   Boolean?
  isUserVerified        Boolean?   @default(false)
  isOwnerVerified        Boolean?   @default(false)
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
  
  }

model Property {
  id           String          @id @default(uuid())
  ownerId      String
  title        String
  description  String?
  price        Decimal?       @default(0)
  currency     String?
  trending    Boolean? 
  featured     Boolean?
  status       PropertyStatus @default(PENDING)
  propertyType String?
  listingType String?
  bedrooms     Int?
  bathrooms    Int?
  areaSqft     Decimal?
  city         String?
  state        String?
  country      String?
  address      String?
  salePrice       Float   @default(0)
  monthlyRent     Float   @default(0)
  yearlyRent      Float   @default(0)
  rentPeriod      String  @default("monthly")
  leaseAmount     Float   @default(0)
  leaseDuration   String  @default("")
  securityDeposit Float   @default(0)
  amenities    String[]   @default([])
  isActive     Boolean         @default(true)
  owner        User            @relation("PropertyOwner", fields: [ownerId], references: [id])
  images       PropertyImage[]
  favorites    Favorite[]
  viewings    Viewing[]
  views       UniquePropertyView[] 
  chats        Chat[]
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model PropertyImage {
  id         String   @id @default(uuid())
  propertyId String
  imageUrl   String
  isCover    Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id])
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Favorite {
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
  @@id([userId, propertyId])
}

model Chat {
  id             String    @id @default(uuid())
  propertyId     String
  ownerId        String
  userId         String
  startedAt      DateTime  @default(now())
  lastMessageAt  DateTime?
  property       Property  @relation(fields: [propertyId], references: [id])
  owner          User      @relation("Owner", fields: [ownerId], references: [id])
  user           User      @relation("User", fields: [userId], references: [id])
  messages       Message[]
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  message   String
  sentAt    DateTime @default(now())
  isRead    Boolean  @default(false)
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  isDeleted      Boolean   @default(false)
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt()
}

model Viewing {
  id        String   @id @default(uuid())
  userId      String
  propertyId  String
  scheduledAt DateTime
  status      ViewingStatus @default(PENDING)
  notes       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])

}

model UniquePropertyView {
 id         String   @id @default(cuid())
 userId      String?
 ipAddress     String?
 propertyId  String
 viewedAt   DateTime @default(now())
 createdAt   DateTime @default(now())
 updatedAt   DateTime @updatedAt()
 user        User?     @relation(fields: [userId], references: [id])
 property    Property @relation(fields: [propertyId], references: [id])
 @@unique([propertyId, userId])
 @@unique([propertyId, ipAddress])

}

enum ViewingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Role {
  user
  owner
  admin
}

enum PropertyStatus {
  AVAILABLE
  DELISTED
  PENDING
}


// @@unique([pageId, visitorId])
// @@index([pageId])